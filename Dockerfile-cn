# 采用官方镜像作为基础
# scipy-notebook 包含了常用的科学计算包，如果不需要可以换成 jupyter/base-notebook
FROM quay.io/jupyter/scipy-notebook:latest

# ------------------------------------------------------------
# 阶段 1：以 root 身份安装系统依赖和 Python 扩展包
# ------------------------------------------------------------
USER root

# [可选] 如果您有其他需要 apt 安装的系统工具，可以放在这里
RUN cat <<EOF > /etc/apt/sources.list.d/ubuntu.sources
Types: deb
URIs: https://mirrors.tuna.tsinghua.edu.cn/ubuntu/
Suites: noble noble-updates noble-backports
Components: main restricted universe multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg

Types: deb
URIs: https://mirrors.tuna.tsinghua.edu.cn/ubuntu/
Suites: noble-security
Components: main restricted universe multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
EOF

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        iputils-ping \
        wget \
    && apt-get clean

RUN cat <<EOF > /opt/conda/.condarc
channels:
  - conda-forge
  - defaults
show_channel_urls: true
default_channels:
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2
custom_channels:
  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
EOF

# 创建一个系统级的 pip.conf 文件
RUN mkdir -p /etc/pip && \
    cat <<EOF > /etc/pip.conf
[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
EOF

COPY environment.yml /tmp/environment.yml

# 使用 pip 并通过国内 pypi 镜像一次性安装所有 JupyterHub 相关的 Python 扩展
RUN pip install --no-cache-dir \
    'lckr-jupyterlab-variableinspector' \
    'dockerspawner' \
    'docker' \
    'oauthenticator' \
    'jupyterlab-language-pack-zh-CN' \
    'jupyterlab-lsp' \
    'python-lsp-server[all]' \
    'jupyterlab_execute_time' \
    'lckr-jupyterlab-variableinspector' \
    'jupyter-resource-usage' \
    &&\
    # [重要] 使用官方脚本修复文件权限
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

COPY sar2real.yml /tmp/sar2real.yml
RUN mamba env create --file /tmp/sar2real.yml && \
    # 使用 mamba run 在新环境中执行命令以注册内核
    # 这会在用户目录中创建一个内核定义文件
    mamba run --name sar2real python -m ipykernel install --user --name "sar2real" --display-name "Python (sar2real)" && \
    mamba clean --all -f -y && \
    # 修复在新环境中创建的内核文件的权限
    fix-permissions "/home/${NB_USER}"

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN mkdir -p /home/jovyan/work/.conda/envs && \
    mkdir -p /home/jovyan/work/.conda/pkgs && \
cat <<EOF > /home/jovyan/.condarc
envs_dirs:
  - /home/jovyan/work/.conda/envs
pkgs_dirs:
  - /home/jovyan/work/.conda/pkgs
EOF

# 确保 jovyan 用户拥有其主目录的全部所有权
RUN chown -R ${NB_USER}:${NB_GID} /home/jovyan

# ------------------------------------------------------------
# 阶段 2：切回 jovyan 用户
# ------------------------------------------------------------
USER ${NB_USER}

# 工作目录保持官方默认
WORKDIR /home/jovyan

# 元数据标签
LABEL maintainer="Feature"
LABEL description="JupyterLab with extensions for JupyterHub (dockerspawner, oauthenticator)"
